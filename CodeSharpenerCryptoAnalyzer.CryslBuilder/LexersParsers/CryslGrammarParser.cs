//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from CryslGrammar.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class CryslGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SPECSECTIONNAME=1, OBJECTSSECTIONNAME=2, EVENTSSECTIONNAME=3, ORDERSSECTIONNAME=4, 
		CONSTRAINTSSECTIONNAME=5, ENSURESSECTIONNAME=6, NEWLINE=7, WS=8, IMPLIES=9, 
		IN=10, OSB=11, CSB=12, AFTER=13, QTS=14, OFB=15, CFB=16, OR=17, AND=18, 
		EQUALS=19, COLON=20, OP=21, CP=22, UNSCORE=23, REGEX=24, COMMA=25, BOOL=26, 
		BYTE=27, SBYTE=28, CHAR=29, DECIMAL=30, DOUBLE=31, FLOAT=32, INT=33, UINT=34, 
		LONG=35, ULONG=36, SHORT=37, USHORT=38, VARNAME=39, ALPHA=40, DIGIT=41, 
		SEMICOLON=42, TYPE=43;
	public const int
		RULE_cryslsection = 0, RULE_specsection = 1, RULE_objectssection = 2, 
		RULE_eventssection = 3, RULE_orderssection = 4, RULE_constraintssection = 5, 
		RULE_ensuressection = 6, RULE_objects = 7, RULE_objectlist = 8, RULE_eventlist = 9, 
		RULE_events = 10, RULE_aggregator = 11, RULE_sngevent = 12, RULE_event = 13, 
		RULE_orderlist = 14, RULE_constraintslist = 15, RULE_constraints = 16, 
		RULE_constraint = 17, RULE_ensureslist = 18, RULE_ensure = 19;
	public static readonly string[] ruleNames = {
		"cryslsection", "specsection", "objectssection", "eventssection", "orderssection", 
		"constraintssection", "ensuressection", "objects", "objectlist", "eventlist", 
		"events", "aggregator", "sngevent", "event", "orderlist", "constraintslist", 
		"constraints", "constraint", "ensureslist", "ensure"
	};

	private static readonly string[] _LiteralNames = {
		null, "'SPEC'", "'OBJECTS'", "'EVENTS'", "'ORDER'", "'CONSTRAINTS'", "'ENSURES'", 
		null, null, "'=>'", "'in'", "'['", "']'", "'after'", "'\"'", "'{'", "'}'", 
		"'|'", "'&'", "'='", "':'", "'('", "')'", "'_'", null, "','", "'bool'", 
		"'byte'", "'sbyte'", "'char'", "'decimal'", "'double'", "'float'", "'int'", 
		"'uint'", "'long'", "'ulong'", "'short'", "'ushort'", null, null, null, 
		"';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SPECSECTIONNAME", "OBJECTSSECTIONNAME", "EVENTSSECTIONNAME", "ORDERSSECTIONNAME", 
		"CONSTRAINTSSECTIONNAME", "ENSURESSECTIONNAME", "NEWLINE", "WS", "IMPLIES", 
		"IN", "OSB", "CSB", "AFTER", "QTS", "OFB", "CFB", "OR", "AND", "EQUALS", 
		"COLON", "OP", "CP", "UNSCORE", "REGEX", "COMMA", "BOOL", "BYTE", "SBYTE", 
		"CHAR", "DECIMAL", "DOUBLE", "FLOAT", "INT", "UINT", "LONG", "ULONG", 
		"SHORT", "USHORT", "VARNAME", "ALPHA", "DIGIT", "SEMICOLON", "TYPE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CryslGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CryslGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CryslGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CryslGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CryslsectionContext : ParserRuleContext {
		public SpecsectionContext specsection() {
			return GetRuleContext<SpecsectionContext>(0);
		}
		public ObjectssectionContext objectssection() {
			return GetRuleContext<ObjectssectionContext>(0);
		}
		public EventssectionContext eventssection() {
			return GetRuleContext<EventssectionContext>(0);
		}
		public OrderssectionContext orderssection() {
			return GetRuleContext<OrderssectionContext>(0);
		}
		public ConstraintssectionContext constraintssection() {
			return GetRuleContext<ConstraintssectionContext>(0);
		}
		public EnsuressectionContext ensuressection() {
			return GetRuleContext<EnsuressectionContext>(0);
		}
		public CryslsectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cryslsection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCryslsection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CryslsectionContext cryslsection() {
		CryslsectionContext _localctx = new CryslsectionContext(Context, State);
		EnterRule(_localctx, 0, RULE_cryslsection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; specsection();
			State = 41; objectssection();
			State = 42; eventssection();
			State = 43; orderssection();
			State = 44; constraintssection();
			State = 45; ensuressection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecsectionContext : ParserRuleContext {
		public ITerminalNode SPECSECTIONNAME() { return GetToken(CryslGrammarParser.SPECSECTIONNAME, 0); }
		public ITerminalNode TYPE() { return GetToken(CryslGrammarParser.TYPE, 0); }
		public SpecsectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specsection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecsection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SpecsectionContext specsection() {
		SpecsectionContext _localctx = new SpecsectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_specsection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(SPECSECTIONNAME);
			State = 48; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectssectionContext : ParserRuleContext {
		public ITerminalNode OBJECTSSECTIONNAME() { return GetToken(CryslGrammarParser.OBJECTSSECTIONNAME, 0); }
		public ObjectsContext objects() {
			return GetRuleContext<ObjectsContext>(0);
		}
		public ObjectssectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectssection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectssection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectssectionContext objectssection() {
		ObjectssectionContext _localctx = new ObjectssectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_objectssection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(OBJECTSSECTIONNAME);
			State = 51; objects();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventssectionContext : ParserRuleContext {
		public ITerminalNode EVENTSSECTIONNAME() { return GetToken(CryslGrammarParser.EVENTSSECTIONNAME, 0); }
		public EventlistContext eventlist() {
			return GetRuleContext<EventlistContext>(0);
		}
		public EventssectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventssection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventssection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventssectionContext eventssection() {
		EventssectionContext _localctx = new EventssectionContext(Context, State);
		EnterRule(_localctx, 6, RULE_eventssection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(EVENTSSECTIONNAME);
			State = 54; eventlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderssectionContext : ParserRuleContext {
		public ITerminalNode ORDERSSECTIONNAME() { return GetToken(CryslGrammarParser.ORDERSSECTIONNAME, 0); }
		public OrderlistContext orderlist() {
			return GetRuleContext<OrderlistContext>(0);
		}
		public OrderssectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderssection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderssection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderssectionContext orderssection() {
		OrderssectionContext _localctx = new OrderssectionContext(Context, State);
		EnterRule(_localctx, 8, RULE_orderssection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(ORDERSSECTIONNAME);
			State = 57; orderlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintssectionContext : ParserRuleContext {
		public ITerminalNode CONSTRAINTSSECTIONNAME() { return GetToken(CryslGrammarParser.CONSTRAINTSSECTIONNAME, 0); }
		public ConstraintslistContext constraintslist() {
			return GetRuleContext<ConstraintslistContext>(0);
		}
		public ConstraintssectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintssection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintssection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintssectionContext constraintssection() {
		ConstraintssectionContext _localctx = new ConstraintssectionContext(Context, State);
		EnterRule(_localctx, 10, RULE_constraintssection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(CONSTRAINTSSECTIONNAME);
			State = 60; constraintslist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnsuressectionContext : ParserRuleContext {
		public ITerminalNode ENSURESSECTIONNAME() { return GetToken(CryslGrammarParser.ENSURESSECTIONNAME, 0); }
		public EnsureslistContext ensureslist() {
			return GetRuleContext<EnsureslistContext>(0);
		}
		public EnsuressectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ensuressection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnsuressection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnsuressectionContext ensuressection() {
		EnsuressectionContext _localctx = new EnsuressectionContext(Context, State);
		EnterRule(_localctx, 12, RULE_ensuressection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(ENSURESSECTIONNAME);
			State = 63; ensureslist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectsContext : ParserRuleContext {
		public ObjectlistContext[] objectlist() {
			return GetRuleContexts<ObjectlistContext>();
		}
		public ObjectlistContext objectlist(int i) {
			return GetRuleContext<ObjectlistContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CryslGrammarParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CryslGrammarParser.SEMICOLON, i);
		}
		public ObjectsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objects; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjects(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectsContext objects() {
		ObjectsContext _localctx = new ObjectsContext(Context, State);
		EnterRule(_localctx, 14, RULE_objects);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 65; objectlist();
				State = 66; Match(SEMICOLON);
				}
				}
				State = 70;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << SBYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << UINT) | (1L << LONG) | (1L << SHORT) | (1L << USHORT) | (1L << TYPE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectlistContext : ParserRuleContext {
		public ObjectlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectlist; } }
	 
		public ObjectlistContext() { }
		public virtual void CopyFrom(ObjectlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ByteValueContext : ObjectlistContext {
		public ITerminalNode BYTE() { return GetToken(CryslGrammarParser.BYTE, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public ByteValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitByteValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValueContext : ObjectlistContext {
		public ITerminalNode BOOL() { return GetToken(CryslGrammarParser.BOOL, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public BoolValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeValueContext : ObjectlistContext {
		public ITerminalNode TYPE() { return GetToken(CryslGrammarParser.TYPE, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public TypeValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CharValueContext : ObjectlistContext {
		public ITerminalNode CHAR() { return GetToken(CryslGrammarParser.CHAR, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public CharValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCharValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UintValueContext : ObjectlistContext {
		public ITerminalNode UINT() { return GetToken(CryslGrammarParser.UINT, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public UintValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUintValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SbyteValueContext : ObjectlistContext {
		public ITerminalNode SBYTE() { return GetToken(CryslGrammarParser.SBYTE, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public SbyteValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSbyteValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalValueContext : ObjectlistContext {
		public ITerminalNode DECIMAL() { return GetToken(CryslGrammarParser.DECIMAL, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public DecimalValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimalValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShortValueContext : ObjectlistContext {
		public ITerminalNode SHORT() { return GetToken(CryslGrammarParser.SHORT, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public ShortValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShortValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UshortValueContext : ObjectlistContext {
		public ITerminalNode USHORT() { return GetToken(CryslGrammarParser.USHORT, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public UshortValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUshortValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoubleValueContext : ObjectlistContext {
		public ITerminalNode DOUBLE() { return GetToken(CryslGrammarParser.DOUBLE, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public DoubleValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LongValueContext : ObjectlistContext {
		public ITerminalNode LONG() { return GetToken(CryslGrammarParser.LONG, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public LongValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLongValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatValueContext : ObjectlistContext {
		public ITerminalNode FLOAT() { return GetToken(CryslGrammarParser.FLOAT, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public FloatValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValueContext : ObjectlistContext {
		public ITerminalNode INT() { return GetToken(CryslGrammarParser.INT, 0); }
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public IntValueContext(ObjectlistContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectlistContext objectlist() {
		ObjectlistContext _localctx = new ObjectlistContext(Context, State);
		EnterRule(_localctx, 16, RULE_objectlist);
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; Match(INT);
				State = 73; Match(VARNAME);
				}
				break;
			case BYTE:
				_localctx = new ByteValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 74; Match(BYTE);
				State = 75; Match(VARNAME);
				}
				break;
			case SBYTE:
				_localctx = new SbyteValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 76; Match(SBYTE);
				State = 77; Match(VARNAME);
				}
				break;
			case CHAR:
				_localctx = new CharValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; Match(CHAR);
				State = 79; Match(VARNAME);
				}
				break;
			case DECIMAL:
				_localctx = new DecimalValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 80; Match(DECIMAL);
				State = 81; Match(VARNAME);
				}
				break;
			case DOUBLE:
				_localctx = new DoubleValueContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 82; Match(DOUBLE);
				State = 83; Match(VARNAME);
				}
				break;
			case FLOAT:
				_localctx = new FloatValueContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 84; Match(FLOAT);
				State = 85; Match(VARNAME);
				}
				break;
			case UINT:
				_localctx = new UintValueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 86; Match(UINT);
				State = 87; Match(VARNAME);
				}
				break;
			case LONG:
				_localctx = new LongValueContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 88; Match(LONG);
				State = 89; Match(VARNAME);
				}
				break;
			case SHORT:
				_localctx = new ShortValueContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 90; Match(SHORT);
				State = 91; Match(VARNAME);
				}
				break;
			case USHORT:
				_localctx = new UshortValueContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 92; Match(USHORT);
				State = 93; Match(VARNAME);
				}
				break;
			case BOOL:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 94; Match(BOOL);
				State = 95; Match(VARNAME);
				}
				break;
			case TYPE:
				_localctx = new TypeValueContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 96; Match(TYPE);
				State = 97; Match(VARNAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventlistContext : ParserRuleContext {
		public EventsContext[] events() {
			return GetRuleContexts<EventsContext>();
		}
		public EventsContext events(int i) {
			return GetRuleContext<EventsContext>(i);
		}
		public EventlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventlistContext eventlist() {
		EventlistContext _localctx = new EventlistContext(Context, State);
		EnterRule(_localctx, 18, RULE_eventlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 100; events();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARNAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventsContext : ParserRuleContext {
		public EventsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_events; } }
	 
		public EventsContext() { }
		public virtual void CopyFrom(EventsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WithoutAggregatorContext : EventsContext {
		public SngeventContext sngevent() {
			return GetRuleContext<SngeventContext>(0);
		}
		public WithoutAggregatorContext(EventsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithoutAggregator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithAggregatorContext : EventsContext {
		public AggregatorContext aggregator() {
			return GetRuleContext<AggregatorContext>(0);
		}
		public EventContext[] @event() {
			return GetRuleContexts<EventContext>();
		}
		public EventContext @event(int i) {
			return GetRuleContext<EventContext>(i);
		}
		public WithAggregatorContext(EventsContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithAggregator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventsContext events() {
		EventsContext _localctx = new EventsContext(Context, State);
		EnterRule(_localctx, 20, RULE_events);
		try {
			int _alt;
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new WithAggregatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 106;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 105; @event();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 108;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 110; aggregator();
				}
				break;
			case 2:
				_localctx = new WithoutAggregatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; sngevent();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AggregatorContext : ParserRuleContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public ITerminalNode[] OR() { return GetTokens(CryslGrammarParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(CryslGrammarParser.OR, i);
		}
		public ITerminalNode[] AND() { return GetTokens(CryslGrammarParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(CryslGrammarParser.AND, i);
		}
		public AggregatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aggregator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAggregator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AggregatorContext aggregator() {
		AggregatorContext _localctx = new AggregatorContext(Context, State);
		EnterRule(_localctx, 22, RULE_aggregator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(VARNAME);
			State = 116; Match(COLON);
			State = 117; Match(EQUALS);
			State = 118; Match(VARNAME);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR || _la==AND) {
				{
				State = 123;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OR:
					{
					State = 119; Match(OR);
					State = 120; Match(VARNAME);
					}
					break;
				case AND:
					{
					State = 121; Match(AND);
					State = 122; Match(VARNAME);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SngeventContext : ParserRuleContext {
		public SngeventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sngevent; } }
	 
		public SngeventContext() { }
		public virtual void CopyFrom(SngeventContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SngEventWithoutArgumentsContext : SngeventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public SngEventWithoutArgumentsContext(SngeventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSngEventWithoutArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SngEventNoArgumentsContext : SngeventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public SngEventNoArgumentsContext(SngeventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSngEventNoArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SngEventWithArgumentsUnscoreContext : SngeventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public ITerminalNode[] UNSCORE() { return GetTokens(CryslGrammarParser.UNSCORE); }
		public ITerminalNode UNSCORE(int i) {
			return GetToken(CryslGrammarParser.UNSCORE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public SngEventWithArgumentsUnscoreContext(SngeventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSngEventWithArgumentsUnscore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SngeventContext sngevent() {
		SngeventContext _localctx = new SngeventContext(Context, State);
		EnterRule(_localctx, 24, RULE_sngevent);
		int _la;
		try {
			State = 162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				_localctx = new SngEventNoArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; Match(VARNAME);
				State = 131; Match(COLON);
				State = 132; Match(VARNAME);
				State = 133; Match(EQUALS);
				State = 134; Match(VARNAME);
				State = 135; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new SngEventWithoutArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; Match(VARNAME);
				State = 137; Match(COLON);
				State = 138; Match(VARNAME);
				State = 139; Match(EQUALS);
				State = 140; Match(VARNAME);
				State = 141; Match(OP);
				State = 142; Match(CP);
				State = 143; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new SngEventWithArgumentsUnscoreContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 144; Match(VARNAME);
				State = 145; Match(COLON);
				State = 146; Match(VARNAME);
				State = 147; Match(EQUALS);
				State = 148; Match(VARNAME);
				State = 149; Match(OP);
				State = 150;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSCORE || _la==VARNAME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					State = 155;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 151; Match(COMMA);
						State = 152; Match(VARNAME);
						}
						break;
					case 2:
						{
						State = 153; Match(COMMA);
						State = 154; Match(UNSCORE);
						}
						break;
					}
					}
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 160; Match(CP);
				State = 161; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
	 
		public EventContext() { }
		public virtual void CopyFrom(EventContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WithPropertiesOnlyContext : EventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public WithPropertiesOnlyContext(EventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithPropertiesOnly(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithoutArgumentsContext : EventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public WithoutArgumentsContext(EventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithoutArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectAssnWithoutArgumentsContext : EventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public ObjectAssnWithoutArgumentsContext(EventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAssnWithoutArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ObjectAssnWithArgumentsContext : EventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CryslGrammarParser.EQUALS, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public ITerminalNode[] UNSCORE() { return GetTokens(CryslGrammarParser.UNSCORE); }
		public ITerminalNode UNSCORE(int i) {
			return GetToken(CryslGrammarParser.UNSCORE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public ObjectAssnWithArgumentsContext(EventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectAssnWithArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WithArgumentsContext : EventContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode COLON() { return GetToken(CryslGrammarParser.COLON, 0); }
		public ITerminalNode OP() { return GetToken(CryslGrammarParser.OP, 0); }
		public ITerminalNode CP() { return GetToken(CryslGrammarParser.CP, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CryslGrammarParser.SEMICOLON, 0); }
		public ITerminalNode[] UNSCORE() { return GetTokens(CryslGrammarParser.UNSCORE); }
		public ITerminalNode UNSCORE(int i) {
			return GetToken(CryslGrammarParser.UNSCORE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public WithArgumentsContext(EventContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 26, RULE_event);
		int _la;
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				_localctx = new WithArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 164; Match(VARNAME);
				State = 165; Match(COLON);
				State = 166; Match(VARNAME);
				State = 167; Match(OP);
				State = 168;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSCORE || _la==VARNAME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					State = 173;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						State = 169; Match(COMMA);
						State = 170; Match(VARNAME);
						}
						break;
					case 2:
						{
						State = 171; Match(COMMA);
						State = 172; Match(UNSCORE);
						}
						break;
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 178; Match(CP);
				State = 179; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new WithoutArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; Match(VARNAME);
				State = 181; Match(COLON);
				State = 182; Match(VARNAME);
				State = 183; Match(OP);
				State = 184; Match(CP);
				State = 185; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new WithPropertiesOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 186; Match(VARNAME);
				State = 187; Match(COLON);
				State = 188; Match(VARNAME);
				State = 189; Match(EQUALS);
				State = 190; Match(VARNAME);
				State = 191; Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new ObjectAssnWithArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 192; Match(VARNAME);
				State = 193; Match(COLON);
				State = 194; Match(VARNAME);
				State = 195; Match(EQUALS);
				State = 196; Match(VARNAME);
				State = 197; Match(OP);
				State = 198;
				_la = TokenStream.LA(1);
				if ( !(_la==UNSCORE || _la==VARNAME) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 205;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					State = 203;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
					case 1:
						{
						State = 199; Match(COMMA);
						State = 200; Match(VARNAME);
						}
						break;
					case 2:
						{
						State = 201; Match(COMMA);
						State = 202; Match(UNSCORE);
						}
						break;
					}
					}
					State = 207;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 208; Match(CP);
				State = 209; Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new ObjectAssnWithoutArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 210; Match(VARNAME);
				State = 211; Match(COLON);
				State = 212; Match(VARNAME);
				State = 213; Match(EQUALS);
				State = 214; Match(VARNAME);
				State = 215; Match(OP);
				State = 216; Match(CP);
				State = 217; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderlistContext : ParserRuleContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode[] REGEX() { return GetTokens(CryslGrammarParser.REGEX); }
		public ITerminalNode REGEX(int i) {
			return GetToken(CryslGrammarParser.REGEX, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public OrderlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderlist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderlistContext orderlist() {
		OrderlistContext _localctx = new OrderlistContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(VARNAME);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGEX) {
				{
				State = 221; Match(REGEX);
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 224; Match(COMMA);
				State = 225; Match(VARNAME);
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REGEX) {
					{
					State = 226; Match(REGEX);
					}
				}

				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintslistContext : ParserRuleContext {
		public ConstraintsContext[] constraints() {
			return GetRuleContexts<ConstraintsContext>();
		}
		public ConstraintsContext constraints(int i) {
			return GetRuleContext<ConstraintsContext>(i);
		}
		public ConstraintslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintslist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraintslist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintslistContext constraintslist() {
		ConstraintslistContext _localctx = new ConstraintslistContext(Context, State);
		EnterRule(_localctx, 30, RULE_constraintslist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 234; constraints();
				}
				}
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARNAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintsContext : ParserRuleContext {
		public ConstraintContext[] constraint() {
			return GetRuleContexts<ConstraintContext>();
		}
		public ConstraintContext constraint(int i) {
			return GetRuleContext<ConstraintContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CryslGrammarParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CryslGrammarParser.SEMICOLON, i);
		}
		public ConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraints; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintsContext constraints() {
		ConstraintsContext _localctx = new ConstraintsContext(Context, State);
		EnterRule(_localctx, 32, RULE_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 239; constraint();
					State = 240; Match(SEMICOLON);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 244;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintContext : ParserRuleContext {
		public ConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraint; } }
	 
		public ConstraintContext() { }
		public virtual void CopyFrom(ConstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IntArgumentsContext : ConstraintContext {
		public ITerminalNode VARNAME() { return GetToken(CryslGrammarParser.VARNAME, 0); }
		public ITerminalNode IN() { return GetToken(CryslGrammarParser.IN, 0); }
		public ITerminalNode OFB() { return GetToken(CryslGrammarParser.OFB, 0); }
		public ITerminalNode CFB() { return GetToken(CryslGrammarParser.CFB, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(CryslGrammarParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(CryslGrammarParser.DIGIT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public ITerminalNode IMPLIES() { return GetToken(CryslGrammarParser.IMPLIES, 0); }
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public IntArgumentsContext(ConstraintContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArguments(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringArgumentsContext : ConstraintContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode IN() { return GetToken(CryslGrammarParser.IN, 0); }
		public ITerminalNode OFB() { return GetToken(CryslGrammarParser.OFB, 0); }
		public ITerminalNode[] QTS() { return GetTokens(CryslGrammarParser.QTS); }
		public ITerminalNode QTS(int i) {
			return GetToken(CryslGrammarParser.QTS, i);
		}
		public ITerminalNode CFB() { return GetToken(CryslGrammarParser.CFB, 0); }
		public ITerminalNode[] TYPE() { return GetTokens(CryslGrammarParser.TYPE); }
		public ITerminalNode TYPE(int i) {
			return GetToken(CryslGrammarParser.TYPE, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public ITerminalNode IMPLIES() { return GetToken(CryslGrammarParser.IMPLIES, 0); }
		public ConstraintContext constraint() {
			return GetRuleContext<ConstraintContext>(0);
		}
		public StringArgumentsContext(ConstraintContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintContext constraint() {
		ConstraintContext _localctx = new ConstraintContext(Context, State);
		EnterRule(_localctx, 34, RULE_constraint);
		int _la;
		try {
			State = 290;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				_localctx = new IntArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(VARNAME);
				State = 247; Match(IN);
				State = 248; Match(OFB);
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 249; Match(DIGIT);
					}
					}
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==DIGIT );
				State = 262;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 254; Match(COMMA);
					State = 256;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 255; Match(DIGIT);
						}
						}
						State = 258;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==DIGIT );
					}
					}
					State = 264;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 265; Match(CFB);
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMPLIES) {
					{
					State = 266; Match(IMPLIES);
					State = 267; constraint();
					}
				}

				}
				break;
			case 2:
				_localctx = new StringArgumentsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 270; Match(VARNAME);
				State = 271; Match(IN);
				State = 272; Match(OFB);
				State = 273; Match(QTS);
				State = 274;
				_la = TokenStream.LA(1);
				if ( !(_la==VARNAME || _la==TYPE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 275; Match(QTS);
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 276; Match(COMMA);
					State = 277; Match(QTS);
					State = 278;
					_la = TokenStream.LA(1);
					if ( !(_la==VARNAME || _la==TYPE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 279; Match(QTS);
					}
					}
					State = 284;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 285; Match(CFB);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IMPLIES) {
					{
					State = 286; Match(IMPLIES);
					State = 287; constraint();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnsureslistContext : ParserRuleContext {
		public EnsureContext[] ensure() {
			return GetRuleContexts<EnsureContext>();
		}
		public EnsureContext ensure(int i) {
			return GetRuleContext<EnsureContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CryslGrammarParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CryslGrammarParser.SEMICOLON, i);
		}
		public EnsureslistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ensureslist; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnsureslist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnsureslistContext ensureslist() {
		EnsureslistContext _localctx = new EnsureslistContext(Context, State);
		EnterRule(_localctx, 36, RULE_ensureslist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 292; ensure();
				State = 293; Match(SEMICOLON);
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==VARNAME );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnsureContext : ParserRuleContext {
		public ITerminalNode[] VARNAME() { return GetTokens(CryslGrammarParser.VARNAME); }
		public ITerminalNode VARNAME(int i) {
			return GetToken(CryslGrammarParser.VARNAME, i);
		}
		public ITerminalNode OSB() { return GetToken(CryslGrammarParser.OSB, 0); }
		public ITerminalNode CSB() { return GetToken(CryslGrammarParser.CSB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CryslGrammarParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CryslGrammarParser.COMMA, i);
		}
		public ITerminalNode AFTER() { return GetToken(CryslGrammarParser.AFTER, 0); }
		public EnsureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ensure; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICryslGrammarVisitor<TResult> typedVisitor = visitor as ICryslGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnsure(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnsureContext ensure() {
		EnsureContext _localctx = new EnsureContext(Context, State);
		EnterRule(_localctx, 38, RULE_ensure);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(VARNAME);
			State = 300; Match(OSB);
			State = 301; Match(VARNAME);
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 302; Match(COMMA);
				State = 303; Match(VARNAME);
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309; Match(CSB);
			State = 319;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AFTER) {
				{
				State = 310; Match(AFTER);
				State = 311; Match(VARNAME);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 312; Match(COMMA);
					State = 313; Match(VARNAME);
					}
					}
					State = 318;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '-', '\x144', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', 'G', '\n', '\t', '\r', '\t', '\xE', '\t', 
		'H', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x65', '\n', '\n', '\x3', '\v', '\x6', '\v', 'h', '\n', '\v', '\r', '\v', 
		'\xE', '\v', 'i', '\x3', '\f', '\x6', '\f', 'm', '\n', '\f', '\r', '\f', 
		'\xE', '\f', 'n', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		't', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '~', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x81', '\v', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\x9E', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xA1', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xA5', '\n', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB0', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB3', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xCE', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xD1', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xDD', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xE1', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xE6', '\n', '\x10', '\a', '\x10', '\xE8', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xEB', '\v', '\x10', '\x3', '\x11', '\x6', '\x11', '\xEE', 
		'\n', '\x11', '\r', '\x11', '\xE', '\x11', '\xEF', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x6', '\x12', '\xF5', '\n', '\x12', '\r', '\x12', 
		'\xE', '\x12', '\xF6', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x6', '\x13', '\xFD', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 
		'\xFE', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\x103', '\n', '\x13', 
		'\r', '\x13', '\xE', '\x13', '\x104', '\a', '\x13', '\x107', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\x10A', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x10F', '\n', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', 
		'\x11B', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x11E', '\v', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x123', '\n', 
		'\x13', '\x5', '\x13', '\x125', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x6', '\x14', '\x12A', '\n', '\x14', '\r', '\x14', '\xE', 
		'\x14', '\x12B', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\a', '\x15', '\x133', '\n', '\x15', '\f', '\x15', '\xE', 
		'\x15', '\x136', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\x13D', '\n', '\x15', '\f', 
		'\x15', '\xE', '\x15', '\x140', '\v', '\x15', '\x5', '\x15', '\x142', 
		'\n', '\x15', '\x3', '\x15', '\x2', '\x2', '\x16', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', '\x4', '\x4', '\x2', 
		'\x19', '\x19', ')', ')', '\x4', '\x2', ')', ')', '-', '-', '\x2', '\x15D', 
		'\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x34', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\n', ':', '\x3', '\x2', '\x2', '\x2', '\f', '=', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '@', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x12', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'g', '\x3', '\x2', '\x2', '\x2', '\x16', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x18', 'u', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xDC', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xDE', '\x3', '\x2', '\x2', '\x2', ' ', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xF4', '\x3', '\x2', '\x2', '\x2', '$', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x12D', '\x3', '\x2', '\x2', '\x2', '*', '+', '\x5', '\x4', '\x3', 
		'\x2', '+', ',', '\x5', '\x6', '\x4', '\x2', ',', '-', '\x5', '\b', '\x5', 
		'\x2', '-', '.', '\x5', '\n', '\x6', '\x2', '.', '/', '\x5', '\f', '\a', 
		'\x2', '/', '\x30', '\x5', '\xE', '\b', '\x2', '\x30', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', '\x33', 
		'\a', '-', '\x2', '\x2', '\x33', '\x5', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x35', '\a', '\x4', '\x2', '\x2', '\x35', '\x36', '\x5', '\x10', '\t', 
		'\x2', '\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', 
		'\x5', '\x2', '\x2', '\x38', '\x39', '\x5', '\x14', '\v', '\x2', '\x39', 
		'\t', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x6', '\x2', '\x2', 
		';', '<', '\x5', '\x1E', '\x10', '\x2', '<', '\v', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', '\a', '\x2', '\x2', '>', '?', '\x5', ' ', '\x11', 
		'\x2', '?', '\r', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\b', 
		'\x2', '\x2', '\x41', '\x42', '\x5', '&', '\x14', '\x2', '\x42', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x5', '\x12', '\n', '\x2', 
		'\x44', '\x45', '\a', ',', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x46', '\x43', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'I', '\x11', '\x3', '\x2', '\x2', '\x2', 'J', 'K', 
		'\a', '#', '\x2', '\x2', 'K', '\x65', '\a', ')', '\x2', '\x2', 'L', 'M', 
		'\a', '\x1D', '\x2', '\x2', 'M', '\x65', '\a', ')', '\x2', '\x2', 'N', 
		'O', '\a', '\x1E', '\x2', '\x2', 'O', '\x65', '\a', ')', '\x2', '\x2', 
		'P', 'Q', '\a', '\x1F', '\x2', '\x2', 'Q', '\x65', '\a', ')', '\x2', '\x2', 
		'R', 'S', '\a', ' ', '\x2', '\x2', 'S', '\x65', '\a', ')', '\x2', '\x2', 
		'T', 'U', '\a', '!', '\x2', '\x2', 'U', '\x65', '\a', ')', '\x2', '\x2', 
		'V', 'W', '\a', '\"', '\x2', '\x2', 'W', '\x65', '\a', ')', '\x2', '\x2', 
		'X', 'Y', '\a', '$', '\x2', '\x2', 'Y', '\x65', '\a', ')', '\x2', '\x2', 
		'Z', '[', '\a', '%', '\x2', '\x2', '[', '\x65', '\a', ')', '\x2', '\x2', 
		'\\', ']', '\a', '\'', '\x2', '\x2', ']', '\x65', '\a', ')', '\x2', '\x2', 
		'^', '_', '\a', '(', '\x2', '\x2', '_', '\x65', '\a', ')', '\x2', '\x2', 
		'`', '\x61', '\a', '\x1C', '\x2', '\x2', '\x61', '\x65', '\a', ')', '\x2', 
		'\x2', '\x62', '\x63', '\a', '-', '\x2', '\x2', '\x63', '\x65', '\a', 
		')', '\x2', '\x2', '\x64', 'J', '\x3', '\x2', '\x2', '\x2', '\x64', 'L', 
		'\x3', '\x2', '\x2', '\x2', '\x64', 'N', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'P', '\x3', '\x2', '\x2', '\x2', '\x64', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x64', 'T', '\x3', '\x2', '\x2', '\x2', '\x64', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x64', 'X', '\x3', '\x2', '\x2', '\x2', '\x64', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\\', '\x3', '\x2', '\x2', '\x2', '\x64', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x65', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'h', '\x5', '\x16', '\f', '\x2', 'g', '\x66', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'm', '\x5', '\x1C', '\xF', '\x2', 'l', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 
		'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x5', '\x18', '\r', '\x2', 
		'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x5', '\x1A', '\xE', 
		'\x2', 's', 'l', '\x3', '\x2', '\x2', '\x2', 's', 'r', '\x3', '\x2', '\x2', 
		'\x2', 't', '\x17', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', ')', '\x2', 
		'\x2', 'v', 'w', '\a', '\x16', '\x2', '\x2', 'w', 'x', '\a', '\x15', '\x2', 
		'\x2', 'x', '\x7F', '\a', ')', '\x2', '\x2', 'y', 'z', '\a', '\x13', '\x2', 
		'\x2', 'z', '~', '\a', ')', '\x2', '\x2', '{', '|', '\a', '\x14', '\x2', 
		'\x2', '|', '~', '\a', ')', '\x2', '\x2', '}', 'y', '\x3', '\x2', '\x2', 
		'\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\a', ',', 
		'\x2', '\x2', '\x83', '\x19', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\a', ')', '\x2', '\x2', '\x85', '\x86', '\a', '\x16', '\x2', '\x2', '\x86', 
		'\x87', '\a', ')', '\x2', '\x2', '\x87', '\x88', '\a', '\x15', '\x2', 
		'\x2', '\x88', '\x89', '\a', ')', '\x2', '\x2', '\x89', '\xA5', '\a', 
		',', '\x2', '\x2', '\x8A', '\x8B', '\a', ')', '\x2', '\x2', '\x8B', '\x8C', 
		'\a', '\x16', '\x2', '\x2', '\x8C', '\x8D', '\a', ')', '\x2', '\x2', '\x8D', 
		'\x8E', '\a', '\x15', '\x2', '\x2', '\x8E', '\x8F', '\a', ')', '\x2', 
		'\x2', '\x8F', '\x90', '\a', '\x17', '\x2', '\x2', '\x90', '\x91', '\a', 
		'\x18', '\x2', '\x2', '\x91', '\xA5', '\a', ',', '\x2', '\x2', '\x92', 
		'\x93', '\a', ')', '\x2', '\x2', '\x93', '\x94', '\a', '\x16', '\x2', 
		'\x2', '\x94', '\x95', '\a', ')', '\x2', '\x2', '\x95', '\x96', '\a', 
		'\x15', '\x2', '\x2', '\x96', '\x97', '\a', ')', '\x2', '\x2', '\x97', 
		'\x98', '\a', '\x17', '\x2', '\x2', '\x98', '\x9F', '\t', '\x2', '\x2', 
		'\x2', '\x99', '\x9A', '\a', '\x1B', '\x2', '\x2', '\x9A', '\x9E', '\a', 
		')', '\x2', '\x2', '\x9B', '\x9C', '\a', '\x1B', '\x2', '\x2', '\x9C', 
		'\x9E', '\a', '\x19', '\x2', '\x2', '\x9D', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\a', 
		'\x18', '\x2', '\x2', '\xA3', '\xA5', '\a', ',', '\x2', '\x2', '\xA4', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\xA4', '\x92', '\x3', '\x2', '\x2', '\x2', '\xA5', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\a', ')', '\x2', '\x2', '\xA7', 
		'\xA8', '\a', '\x16', '\x2', '\x2', '\xA8', '\xA9', '\a', ')', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\x17', '\x2', '\x2', '\xAA', '\xB1', '\t', 
		'\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\x1B', '\x2', '\x2', '\xAC', 
		'\xB0', '\a', ')', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x1B', '\x2', 
		'\x2', '\xAE', '\xB0', '\a', '\x19', '\x2', '\x2', '\xAF', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\a', '\x18', '\x2', '\x2', '\xB5', '\xDD', '\a', ',', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', ')', '\x2', '\x2', '\xB7', '\xB8', '\a', 
		'\x16', '\x2', '\x2', '\xB8', '\xB9', '\a', ')', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x17', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x18', '\x2', 
		'\x2', '\xBB', '\xDD', '\a', ',', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		')', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x16', '\x2', '\x2', '\xBE', 
		'\xBF', '\a', ')', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x15', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', ')', '\x2', '\x2', '\xC1', '\xDD', '\a', 
		',', '\x2', '\x2', '\xC2', '\xC3', '\a', ')', '\x2', '\x2', '\xC3', '\xC4', 
		'\a', '\x16', '\x2', '\x2', '\xC4', '\xC5', '\a', ')', '\x2', '\x2', '\xC5', 
		'\xC6', '\a', '\x15', '\x2', '\x2', '\xC6', '\xC7', '\a', ')', '\x2', 
		'\x2', '\xC7', '\xC8', '\a', '\x17', '\x2', '\x2', '\xC8', '\xCF', '\t', 
		'\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x1B', '\x2', '\x2', '\xCA', 
		'\xCE', '\a', ')', '\x2', '\x2', '\xCB', '\xCC', '\a', '\x1B', '\x2', 
		'\x2', '\xCC', '\xCE', '\a', '\x19', '\x2', '\x2', '\xCD', '\xC9', '\x3', 
		'\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCE', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD3', '\a', '\x18', '\x2', '\x2', '\xD3', '\xDD', '\a', ',', '\x2', 
		'\x2', '\xD4', '\xD5', '\a', ')', '\x2', '\x2', '\xD5', '\xD6', '\a', 
		'\x16', '\x2', '\x2', '\xD6', '\xD7', '\a', ')', '\x2', '\x2', '\xD7', 
		'\xD8', '\a', '\x15', '\x2', '\x2', '\xD8', '\xD9', '\a', ')', '\x2', 
		'\x2', '\xD9', '\xDA', '\a', '\x17', '\x2', '\x2', '\xDA', '\xDB', '\a', 
		'\x18', '\x2', '\x2', '\xDB', '\xDD', '\a', ',', '\x2', '\x2', '\xDC', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xDC', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xDC', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xDD', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\a', ')', '\x2', 
		'\x2', '\xDF', '\xE1', '\a', '\x1A', '\x2', '\x2', '\xE0', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', 
		'\xE9', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x1B', '\x2', 
		'\x2', '\xE3', '\xE5', '\a', ')', '\x2', '\x2', '\xE4', '\xE6', '\a', 
		'\x1A', '\x2', '\x2', '\xE5', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE5', 
		'\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', '\x3', '\x2', '\x2', 
		'\x2', '\xE7', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE9', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x5', 
		'\"', '\x12', '\x2', '\xED', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEE', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF2', '\x5', '$', '\x13', '\x2', '\xF2', 
		'\xF3', '\a', ',', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\xF4', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF9', '\a', ')', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'\f', '\x2', '\x2', '\xFA', '\xFC', '\a', '\x11', '\x2', '\x2', '\xFB', 
		'\xFD', '\a', '+', '\x2', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x100', '\x102', '\a', '\x1B', '\x2', 
		'\x2', '\x101', '\x103', '\a', '+', '\x2', '\x2', '\x102', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x107', '\x3', '\x2', '\x2', '\x2', '\x106', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x108', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', 
		'\x108', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10E', '\a', '\x12', '\x2', 
		'\x2', '\x10C', '\x10D', '\a', '\v', '\x2', '\x2', '\x10D', '\x10F', '\x5', 
		'$', '\x13', '\x2', '\x10E', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10E', 
		'\x10F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x110', '\x111', '\a', ')', '\x2', '\x2', '\x111', '\x112', '\a', 
		'\f', '\x2', '\x2', '\x112', '\x113', '\a', '\x11', '\x2', '\x2', '\x113', 
		'\x114', '\a', '\x10', '\x2', '\x2', '\x114', '\x115', '\t', '\x3', '\x2', 
		'\x2', '\x115', '\x11C', '\a', '\x10', '\x2', '\x2', '\x116', '\x117', 
		'\a', '\x1B', '\x2', '\x2', '\x117', '\x118', '\a', '\x10', '\x2', '\x2', 
		'\x118', '\x119', '\t', '\x3', '\x2', '\x2', '\x119', '\x11B', '\a', '\x10', 
		'\x2', '\x2', '\x11A', '\x116', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11F', 
		'\x122', '\a', '\x12', '\x2', '\x2', '\x120', '\x121', '\a', '\v', '\x2', 
		'\x2', '\x121', '\x123', '\x5', '$', '\x13', '\x2', '\x122', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x125', '\x3', '\x2', '\x2', '\x2', '\x124', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x110', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'%', '\x3', '\x2', '\x2', '\x2', '\x126', '\x127', '\x5', '(', '\x15', 
		'\x2', '\x127', '\x128', '\a', ',', '\x2', '\x2', '\x128', '\x12A', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x126', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12C', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x12D', '\x12E', '\a', ')', '\x2', '\x2', '\x12E', 
		'\x12F', '\a', '\r', '\x2', '\x2', '\x12F', '\x134', '\a', ')', '\x2', 
		'\x2', '\x130', '\x131', '\a', '\x1B', '\x2', '\x2', '\x131', '\x133', 
		'\a', ')', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x136', '\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x141', '\a', '\xE', '\x2', '\x2', '\x138', '\x139', 
		'\a', '\xF', '\x2', '\x2', '\x139', '\x13E', '\a', ')', '\x2', '\x2', 
		'\x13A', '\x13B', '\a', '\x1B', '\x2', '\x2', '\x13B', '\x13D', '\a', 
		')', '\x2', '\x2', '\x13C', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x141', '\x138', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\x3', 
		'\x2', '\x2', '\x2', '\x142', ')', '\x3', '\x2', '\x2', '\x2', '!', 'H', 
		'\x64', 'i', 'n', 's', '}', '\x7F', '\x9D', '\x9F', '\xA4', '\xAF', '\xB1', 
		'\xCD', '\xCF', '\xDC', '\xE0', '\xE5', '\xE9', '\xEF', '\xF6', '\xFE', 
		'\x104', '\x108', '\x10E', '\x11C', '\x122', '\x124', '\x12B', '\x134', 
		'\x13E', '\x141',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
